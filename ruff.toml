fix = true
preview = true

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 97
indent-width = 4

# Assume Python 3.9
target-version = "py310"

[lint]

# ruff rules
# https://docs.astral.sh/ruff/rules

select = [
    "F", # pyflakes-f
    "E", # pycodestyle-e-w
    "W", # pycodestyle-e-w
    "C90", # mccabe-c90
    "I", #  isort-i
    "N", #  pep8-naming-n
    "D", # pydocstyle-d
    "UP", # pyupgrade-up
    "YTT", # flake8-2020-ytt
    "ANN", # flake8-annotations-ann
    "ASYNC", # flake8-async-async
    "S", # flake8-bandit-s
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "COM", # flake8-commas
    # "CPY", # flake8-copyright
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "DJ", # flake8-django
    "EM", # flake8-errmsg
    "EXE", # flake8-executable
    "FA", # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "LOG", # flake8-logging
    "G", # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    # "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT", # flake8-pytest-style
    "Q", # flake8-quote
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TC", # flake8-type-checking
    "INT", # flake8-gettext
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "TD", # flake8-todos
    "FIX", # flake8-fixme
    "ERA", # eradicate
    "PD", # pandas-vet
    "PGH", # pygrep-hooks
    "PL", # pylint
    "PLC", # convention
    "PLE", # error
    "PLR", # refactor
    "PLW", # warning
    "TRY", # tryceratops
    "FLY", # flynt
    "NPY", # numPy-specific rules
    # "FAST", # fastapi
    "AIR", # airflow
    "PERF", # perflint
    "FURB", # refurb
    "DOC", # pydoclint
    "RUF", # ruff-specific-rules
]

[lint.per-file-ignores]
"_init_.py"=[
    "D104" #undocumented-public-package
]
"test/**.py"=[
    "D100", # missing-docstring
    "D101", # undocumented-public-class
    "D102", # undocumented-public-method
    "D103", # undocumented-public-function
    "S101", # assert
    "PLC2701", # import-private-name
    "SLF001", # private-member-access
    "ARG001", # unused-function-argument
]

ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.

# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.

# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[lint.pydocstyle]
convention = "google" # docstring のスタイルを Google に設定
